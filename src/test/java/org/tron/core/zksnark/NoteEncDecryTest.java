package org.tron.core.zksnark;

import java.util.Optional;
import org.junit.Assert;
import org.junit.Test;
import org.tron.core.exception.ZksnarkException;
import org.tron.core.zen.note.Note;
import org.tron.core.zen.note.NoteEncryption.Encryption.EncCiphertext;
import org.tron.core.zen.note.NoteEncryption.Encryption.OutCiphertext;
import org.tron.core.zen.note.OutgoingPlaintext;

public class NoteEncDecryTest {

    @Test
    public void testDecryptWithOvk() throws ZksnarkException {
        //input
        OutCiphertext outCiphertext = new OutCiphertext();
        outCiphertext.data = new byte[]{13, -39, 109, 63, -91, 53, -16, -8, -39, -47, 13, -36, 49, 90, -119, 4, -36,
                -70, -25, 101, 85, -39, -33, 25, 109, 107, -55, -104, 23, 120, 91, 112, -10, 75, 26, -7, -63, -57, 98,
                61, -90, 122, -59, 26, 47, 59, -76, -83, -94, -64, -67, -25, -115, -82, 108, 78, -80, -87, -61, -3,
                -23, -99, 92, 114, -14, 69, -58, -73, 1, -106, -65, 39, 126, -14, -46, 67, 17, 13, -79, -36};

        byte[] ovk = {-91, -41, -115, 8, -94, 69, 15, -49, -44, 69, -65, 38, 15, -115, 53, -47, 48, 54, 106, -123,
                126, -12, 3, -104, 18, 20, 57, -39, -114, -72, 74, -118};
        byte[] cv = {-54, -2, -107, -64, -18, 48, 24, -57, -40, -56, 75, 40, -110, -92, -108, -52, -36, -21, 10,
                -34, 2, 27, -128, 81, -59, -124, -54, 110, -14, 59, 21, -28};
        byte[] cm = {74, -127, -10, -57, -81, 124, 114, -96, 99, 21, 26, -21, -43, 59, -86, 31, -57, 90, -79, -105,
                104, 9, 4, 82, -21, 114, 79, 29, 110, 10, 76, 17};
        byte[] epk = {-51, -80, 50, -56, -44, -77, -127, 60, 79, -92, -121, -72, 53, 75, -93, -11, -76, 13, 82, 123,
                35, -32, -12, 118, 115, 65, -54, -80, -59, 95, -91, -115};

                //output
        Optional<OutgoingPlaintext> ret = OutgoingPlaintext
                .decrypt(outCiphertext, ovk, cv, cm, epk);
        OutgoingPlaintext result = ret.get();

        byte[] pk_d = {-115, 5, -71, -104, -116, -55, -12, 33, 108, -64, -122, -21, 126, 79, -20, 3, 58, -81, -63,
                8, -11, -122, 107, 119, 11, -1, -70, 90, 103, 91, -69, -103};
        byte[] esk = {40, 18, 111, -51, -72, -61, -6, -62, 29, -81, 69, 89, -103, 113, -12, -64, 106, 39, -17, 64,
                89, -15, -112, 59, -94, 115, 84, -3, 49, -59, -16, 11};

        Assert.assertArrayEquals(result.pk_d, pk_d);
        Assert.assertArrayEquals(result.esk, esk);
    }

    @Test
    public void testDecryptEncWithEpk() throws ZksnarkException {
        //input
        EncCiphertext enc = new EncCiphertext();
        enc.data = new byte[]{73, 11, -93, 50, 29, -104, -124, 127, 62, -34, -76, -25, -89, 69, -74, -28, -73, -57, 16,
                -19, -88, 104, 107, 103, -65, -53, 47, -24, 24, 117, 8, -102, 102, 44, -63, 94, 34, -10, -62, 75, 84,
                -91, -128, -42, 110, 80, -89, -36, 43, 103, 60, -34, -22, 42, -42, -117, 53, -84, 109, 29, -31, -46,
                -61, 126, 1, -54, 109, -67, -113, -23, -72, -96, 114, -23, 27, 110, -58, -66, -91, -33, -119, 114, -86,
                -90, -95, -10, 60, -118, 113, -95, 2, 121, 7, 26, -42, 111, 33, -13, 119, -38, -28, 31, 43, 8, 73, -94,
                47, 37, 5, -22, -95, -128, 109, 21, -96, 90, 10, -64, -81, -3, 7, 11, -85, -77, -106, -7, -43, 27, 17,
                -106, 24, 61, 47, -71, -55, -52, -33, -90, 96, -76, -102, -24, -110, 30, -70, -128, 118, -104, 113,
                -29, 2, -8, -22, 27, 54, -87, 15, -9, -78, 109, 18, -6, 3, 126, -38, -33, -31, 78, 76, -73, 113, -81,
                -23, 52, -83, -114, -80, -102, 28, -127, -14, 120, 8, 59, 69, -80, -28, 83, 110, 80, -127, -15, -63,
                -80, 3, -26, -58, 5, 21, -101, -118, 65, 93, -1, -73, 6, 108, 53, 88, -40, 91, -102, -34, -18, -92,
                104, 45, 44, -13, -26, 44, 106, 39, 4, 64, -88, 125, 82, -33, 72, 104, 80, 5, 32, -24, 78, 33, 28,
                -34, 34, 61, 120, -116, 94, -114, 77, -15, 41, -99, 19, 11, -94, 54, 46, 33, -122, -62, 58, 14, 28,
                -63, 35, -10, 96, -75, 24, -122, -126, 90, 116, -36, 47, 103, -77, -15, -48, -122, 86, 45, -1, 80,
                -36, -119, -97, 38, -3, 1, -15, -72, -2, -127, -10, 93, 101, -101, -16, 11, 82, 113, -87, 103, -24,
                -93, 98, 53, -84, -120, -124, 69, 34, 52, 3, -81, -97, -88, -36, 17, -18, 105, 51, -103, 12, 21, 28,
                -104, -4, -2, -90, -115, -15, -5, 5, 55, -52, -105, 73, 83, -82, 36, 78, -2, -25, -40, -96, 9, 100,
                -43, 1, 51, 117, 20, 80, -96, -83, 87, -123, 59, 40, -11, 0, -87, 48, -51, -94, -69, 46, 58, -74, 23,
                -43, 122, -2, -118, 80, -69, -34, -2, -115, 45, 27, 96, -51, -46, -71, -90, 88, 28, -40, 47, 7, 20,
                -17, 44, -9, 43, -6, -117, 91, -27, 97, 19, 32, -39, 67, 44, 16, 121, 126, 43, 115, 47, -56, 41, -128,
                -126, -84, -14, -121, 1, 79, 13, 41, -115, 26, 18, 55, 82, -77, 122, 5, 41, 63, -79, 49, -107, 101,
                -125, -95, 37, -104, 47, 104, 95, 41, -114, 2, 6, -83, -107, 62, 2, 78, 105, -89, 18, 49, -23, -45,
                -67, 51, -8, -42, -85, 68, 70, -4, -43, 72, 63, 96, 110, -6, -69, -47, 55, -62, 105, -99, -41, -54,
                116, 114, -69, 120, -85, -19, 8, -19, -102, -88, 49, -96, -109, 4, 14, 92, -80, -49, 99, 126, -12, -5,
                56, -71, -49, 104, -124, 92, 73, -7, 113, 81, 69, -18, 111, 29, -82, 30, -28, 22, -105, 103, -66, 48,
                -24, 80, -108, -124, -78, -44, -68, 23, -90, 87, 16, 82, 29, 30, 75, 21, 127, 90, -122, 2, 37, -114,
                119, -117, -54, 105, 118, -29, -13, 115, -56, -106, -54, -121, -39, 104, 45, -11, -106, -61, -53, 73,
                -126, 107, -49, -17, 6, -47, -68, -42, -76, -55, 44, 49, -82, 62};

        byte[] cmu = {-60, 25, 62, 92, 92, -119, -99, -61, 118, -128, 98, -28, -94, 94, -92, 85, 54, 107, 70, 85, 107,
                73, 5, 88, 101, 45, -98, -105, -124, -21, -108, 70};

        //same as last case
        byte[] epk = {-51, -80, 50, -56, -44, -77, -127, 60, 79, -92, -121, -72, 53, 75, -93, -11, -76, 13, 82, 123,
                35, -32, -12, 118, 115, 65, -54, -80, -59, 95, -91, -115};

        //output of last case
        byte[] pk_d = {-115, 5, -71, -104, -116, -55, -12, 33, 108, -64, -122, -21, 126, 79, -20, 3, 58, -81, -63,
                8, -11, -122, 107, 119, 11, -1, -70, 90, 103, 91, -69, -103};
        byte[] esk = {40, 18, 111, -51, -72, -61, -6, -62, 29, -81, 69, 89, -103, 113, -12, -64, 106, 39, -17, 64,
                89, -15, -112, 59, -94, 115, 84, -3, 49, -59, -16, 11};

        OutgoingPlaintext outgoingPlaintext = new OutgoingPlaintext(pk_d,esk);

        //output
        Optional<Note> ret2 = Note.decrypt(
                enc, epk, outgoingPlaintext.esk, outgoingPlaintext.pk_d, cmu);
        Note result2 = ret2.get();

        byte[] rcm = new byte[]{-27, -79, 101, -109, 92, -42, -119, -24, 110, 64, -72, -126, -76, -71, -126, 116, 17,
                -104, -55, -92, -28, 86, -36, 25, -85, 65, -118, -44, -104, -105, 63, 9};
        byte[] d = new byte[]{90, -81, -67, -95, 91, 121, 13, 56, 99, 112, 23};
        Assert.assertArrayEquals(d, result2.d.getData());
        Assert.assertArrayEquals(rcm, result2.rcm);
        Assert.assertEquals(4000, result2.value);
    }
}
