package org.tron.common.crypto.zksnark;

import java.math.BigInteger;

public class TestVerify {

  public static void main(String[] args) {
    TestVerify tv = new TestVerify();
    //   tv.f();
    tv.verifyTx();
  }

  public void testPoint() {
    G1Point H = new G1Point(new BigInteger(
        "12091046215835229523641173286701717671667447745509192321596954139357866668225"),
        new BigInteger(
            "14446807589950902476683545679847436767890904443411534435294953056557941441758"));
    G1Point K = new G1Point(new BigInteger(
        "21341087976609916409401737322664290631992568431163400450267978471171152600502"),
        new BigInteger(
            "2942165230690572858696920423896381470344658299915828986338281196715687693170"));

    BN128<Fp> h = H.toBN128();
    BN128<Fp> k = K.toBN128();
    BN128G1 h1 = H.toBN128G1();
    BN128G1 k1 = K.toBN128G1();

    System.out.println(h == null ? "h is null" : "h is not null");
    System.out.println(k == null ? "k is null" : "k is not null");
    System.out.println(h1 == null ? "h1 is null" : "h1 is not null");
    System.out.println(k1 == null ? "k1 is null" : "k1 is not null");
  }

  public void f() {
    G1Point p1 = new G1Point(1, 2);
    G1Point p2 = new G1Point(1, 2);
    G1Point explict_sum = p1.add(p2);
    G1Point scalar_prod = p1.mul(BigInteger.valueOf(2));
    if (explict_sum.getX().equals(scalar_prod.getX()) && explict_sum.getY()
        .equals(scalar_prod.getY())) {
      System.out.println("f successfully");
    } else {
      System.out.println("f failed");
    }

  }

  public void testMul() {
    G1Point p = new G1Point(new BigInteger(
        "14125296762497065001182820090155008161146766663259912659363835465243039841726"),
        new BigInteger(
            "16229134936871442251132173501211935676986397196799085184804749187146857848057"));
    p = p.mul(new BigInteger(
        "13986731495506593864492662381614386532349950841221768152838255933892789078521"));
    if (p.getX().equals(new BigInteger(
        "18256332256630856740336504687838346961237861778318632856900758565550522381207")) &&
        p.getY().equals(new BigInteger(
            "6976682127058094634733239494758371323697222088503263230319702770853579280803"))) {
      System.out.println("testMul successfully");
    } else {
      System.out.println("testMul failed");
    }
  }

  public void verifyTx() {
    BigInteger[] input = new BigInteger[9];
    G1Point A = new G1Point(new BigInteger(
        "12873740738727497448187997291915224677121726020054032516825496230827252793177"),
        new BigInteger(
            "21804419174137094775122804775419507726154084057848719988004616848382402162497"));
    G1Point A_p = new G1Point(new BigInteger(
        "7742452358972543465462254569134860944739929848367563713587808717088650354556"),
        new BigInteger(
            "7324522103398787664095385319014038380128814213034709026832529060148225837366"));
    G2Point B = new G2Point(new BigInteger(
        "8176651290984905087450403379100573157708110416512446269839297438960217797614"),
        new BigInteger(
            "15588556568726919713003060429893850972163943674590384915350025440408631945055"),
        new BigInteger(
            "15347511022514187557142999444367533883366476794364262773195059233657571533367"),
        new BigInteger(
            "4265071979090628150845437155927259896060451682253086069461962693761322642015"));
    G1Point B_p = new G1Point(new BigInteger(
        "2979746655438963305714517285593753729335852012083057917022078236006592638393"),
        new BigInteger(
            "6470627481646078059765266161088786576504622012540639992486470834383274712950"));
    G1Point C = new G1Point(new BigInteger(
        "6851077925310461602867742977619883934042581405263014789956638244065803308498"),
        new BigInteger(
            "10336382210592135525880811046708757754106524561907815205241508542912494488506"));
    G1Point C_p = new G1Point(new BigInteger(
        "12491625890066296859584468664467427202390981822868257437245835716136010795448"),
        new BigInteger(
            "13818492518017455361318553880921248537817650587494176379915981090396574171686"));
    G1Point H = new G1Point(new BigInteger(
        "12091046215835229523641173286701717671667447745509192321596954139357866668225"),
        new BigInteger(
            "14446807589950902476683545679847436767890904443411534435294953056557941441758"));
    G1Point K = new G1Point(new BigInteger(
        "21341087976609916409401737322664290631992568431163400450267978471171152600502"),
        new BigInteger(
            "2942165230690572858696920423896381470344658299915828986338281196715687693170"));
    input[0] = new BigInteger(
        "13986731495506593864492662381614386532349950841221768152838255933892789078521");
    input[1] = new BigInteger(
        "622860516154313070522697309645122400675542217310916019527100517240519630053");
    input[2] = new BigInteger(
        "11094488463398718754251685950409355128550342438297986977413505294941943071569");
    input[3] = new BigInteger(
        "6627643779954497813586310325594578844876646808666478625705401786271515864467");
    input[4] = new BigInteger(
        "2957286918163151606545409668133310005545945782087581890025685458369200827463");
    input[5] = new BigInteger(
        "1384290496819542862903939282897996566903332587607290986044945365745128311081");
    input[6] = new BigInteger(
        "5613571677741714971687805233468747950848449704454346829971683826953541367271");
    input[7] = new BigInteger(
        "9643208548031422463313148630985736896287522941726746581856185889848792022807");
    input[8] = new BigInteger("18066496933330839731877828156604");

    Proof proof = new Proof(A, A_p, B, B_p, C, C_p, H, K);
    int result = new ZkVerify().verify(VerifyingKey.getInstance(), input, proof);
    if (result == 0) {
      System.out.println("Transaction successfully verified.");
    } else {
      System.out.println("Transaction failed verified.");
      System.out.printf("result = %d.\n", result);
    }
  }
}
